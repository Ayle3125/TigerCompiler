
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 19 17:10:08 CST 2017
//----------------------------------------------------

package parser;

import java.util.LinkedList;
import ast.Ast.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 19 17:10:08 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\011\004\000\002\002\004\000\002\015" +
    "\004\000\002\015\002\000\002\010\023\000\002\007\010" +
    "\000\002\007\012\000\002\017\004\000\002\016\004\000" +
    "\002\006\015\000\002\005\006\000\002\005\011\000\002" +
    "\005\007\000\002\005\011\000\002\005\007\000\002\005" +
    "\005\000\002\012\003\000\002\004\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\006\000\002\004\007\000\002\004\006\000\002\004\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\005\000\002\003\005\000\002\013\002\000\002" +
    "\013\004\000\002\021\004\000\002\023\002\000\002\023" +
    "\005\000\002\022\005\000\002\024\005\000\002\025\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\013\006\001\002\000\004\002\213\001" +
    "\002\000\004\013\137\001\002\000\004\047\007\001\002" +
    "\000\024\014\ufff1\034\ufff1\037\ufff1\040\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\046\ufff1\047\ufff1\001\002\000\004\044\011" +
    "\001\002\000\004\015\012\001\002\000\004\016\013\001" +
    "\002\000\004\017\014\001\002\000\004\020\015\001\002" +
    "\000\004\042\016\001\002\000\004\006\017\001\002\000" +
    "\004\040\020\001\002\000\004\041\021\001\002\000\004" +
    "\047\007\001\002\000\004\043\023\001\002\000\004\044" +
    "\024\001\002\000\014\007\031\011\027\026\030\044\025" +
    "\047\007\001\002\000\016\007\031\011\027\026\030\044" +
    "\025\045\ufffe\047\007\001\002\000\004\045\127\001\002" +
    "\000\004\042\123\001\002\000\004\042\117\001\002\000" +
    "\004\042\111\001\002\000\006\034\033\040\034\001\002" +
    "\000\022\021\036\022\040\023\041\025\035\035\043\042" +
    "\044\047\042\050\045\001\002\000\022\021\036\022\040" +
    "\023\041\025\035\035\043\042\044\047\042\050\045\001" +
    "\002\000\006\005\100\047\007\001\002\000\026\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\036\uffe8\037\uffe8\041" +
    "\uffe8\043\uffe8\046\uffe8\001\002\000\020\027\052\030\053" +
    "\031\054\032\051\033\047\036\055\041\074\001\002\000" +
    "\026\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\036\uffe7" +
    "\037\uffe7\041\uffe7\043\uffe7\046\uffe7\001\002\000\026\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\036\uffe6\037\uffe6" +
    "\041\uffe6\043\uffe6\046\uffe6\001\002\000\026\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\036\ufff0\037\ufff0\041\ufff0" +
    "\043\ufff0\046\ufff0\001\002\000\022\021\036\022\040\023" +
    "\041\025\035\035\043\042\044\047\042\050\045\001\002" +
    "\000\022\021\036\022\040\023\041\025\035\035\043\042" +
    "\044\047\042\050\045\001\002\000\026\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\036\uffe2\037\uffe2\041\uffe2\043" +
    "\uffe2\046\uffe2\001\002\000\020\027\052\030\053\031\054" +
    "\032\051\033\047\036\055\043\050\001\002\000\022\021" +
    "\036\022\040\023\041\025\035\035\043\042\044\047\042" +
    "\050\045\001\002\000\026\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\036\uffea\037\uffea\041\uffea\043\uffea\046\uffea" +
    "\001\002\000\022\021\036\022\040\023\041\025\035\035" +
    "\043\042\044\047\042\050\045\001\002\000\022\021\036" +
    "\022\040\023\041\025\035\035\043\042\044\047\042\050" +
    "\045\001\002\000\022\021\036\022\040\023\041\025\035" +
    "\035\043\042\044\047\042\050\045\001\002\000\022\021" +
    "\036\022\040\023\041\025\035\035\043\042\044\047\042" +
    "\050\045\001\002\000\004\047\007\001\002\000\004\042" +
    "\060\001\002\000\026\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\036\uffe3\037\uffe3\041\uffe3\043\uffe3\046\uffe3\001" +
    "\002\000\022\021\036\022\040\023\041\025\035\035\043" +
    "\042\044\047\042\050\045\001\002\000\004\043\065\001" +
    "\002\000\020\027\052\030\053\031\054\032\051\033\047" +
    "\036\055\037\063\001\002\000\022\021\036\022\040\023" +
    "\041\025\035\035\043\042\044\047\042\050\045\001\002" +
    "\000\004\043\uffd5\001\002\000\026\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\036\uffd6\037\uffd6\041\uffd6\043\uffd6" +
    "\046\uffd6\001\002\000\026\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\036\055\037\uffed\041\uffed\043\uffed\046\uffed" +
    "\001\002\000\026\027\uffee\030\uffee\031\054\032\uffee\033" +
    "\uffee\036\055\037\uffee\041\uffee\043\uffee\046\uffee\001\002" +
    "\000\026\027\uffef\030\uffef\031\054\032\uffef\033\uffef\036" +
    "\055\037\uffef\041\uffef\043\uffef\046\uffef\001\002\000\024" +
    "\027\052\030\053\031\054\033\047\036\055\037\uffeb\041" +
    "\uffeb\043\uffeb\046\uffeb\001\002\000\026\027\052\030\053" +
    "\031\054\032\uffec\033\uffec\036\055\037\uffec\041\uffec\043" +
    "\uffec\046\uffec\001\002\000\026\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\036\055\037\uffe9\041\uffe9\043\uffe9\046" +
    "\uffe9\001\002\000\004\034\075\001\002\000\022\021\036" +
    "\022\040\023\041\025\035\035\043\042\044\047\042\050" +
    "\045\001\002\000\020\027\052\030\053\031\054\032\051" +
    "\033\047\036\055\046\077\001\002\000\022\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\026\ufff4\044\ufff4\045\ufff4\047\ufff4" +
    "\001\002\000\004\040\104\001\002\000\004\042\102\001" +
    "\002\000\004\043\103\001\002\000\026\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\036\uffe5\037\uffe5\041\uffe5\043" +
    "\uffe5\046\uffe5\001\002\000\022\021\036\022\040\023\041" +
    "\025\035\035\043\042\044\047\042\050\045\001\002\000" +
    "\020\027\052\030\053\031\054\032\051\033\047\036\055" +
    "\041\106\001\002\000\026\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\036\uffe4\037\uffe4\041\uffe4\043\uffe4\046\uffe4" +
    "\001\002\000\020\027\052\030\053\031\054\032\051\033" +
    "\047\036\055\046\110\001\002\000\022\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\026\ufff7\044\ufff7\045\ufff7\047\ufff7\001" +
    "\002\000\022\021\036\022\040\023\041\025\035\035\043" +
    "\042\044\047\042\050\045\001\002\000\020\027\052\030" +
    "\053\031\054\032\051\033\047\036\055\043\113\001\002" +
    "\000\014\007\031\011\027\026\030\044\025\047\007\001" +
    "\002\000\004\010\115\001\002\000\014\007\031\011\027" +
    "\026\030\044\025\047\007\001\002\000\022\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\026\ufff6\044\ufff6\045\ufff6\047\ufff6" +
    "\001\002\000\022\021\036\022\040\023\041\025\035\035" +
    "\043\042\044\047\042\050\045\001\002\000\020\027\052" +
    "\030\053\031\054\032\051\033\047\036\055\043\121\001" +
    "\002\000\004\046\122\001\002\000\022\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\026\ufff5\044\ufff5\045\ufff5\047\ufff5\001" +
    "\002\000\022\021\036\022\040\023\041\025\035\035\043" +
    "\042\044\047\042\050\045\001\002\000\020\027\052\030" +
    "\053\031\054\032\051\033\047\036\055\043\125\001\002" +
    "\000\014\007\031\011\027\026\030\044\025\047\007\001" +
    "\002\000\022\007\ufff3\010\ufff3\011\ufff3\012\ufff3\026\ufff3" +
    "\044\ufff3\045\ufff3\047\ufff3\001\002\000\004\045\130\001" +
    "\002\000\004\013\ufffd\001\002\000\020\007\031\011\027" +
    "\012\ufffe\026\030\044\025\045\ufffe\047\007\001\002\000" +
    "\004\045\133\001\002\000\022\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\026\ufff2\044\ufff2\045\ufff2\047\ufff2\001\002\000" +
    "\006\012\uffff\045\uffff\001\002\000\004\002\001\001\002" +
    "\000\004\013\137\001\002\000\004\047\007\001\002\000" +
    "\006\014\142\044\141\001\002\000\012\004\uffdc\005\uffdc" +
    "\015\uffdc\047\uffdc\001\002\000\004\047\007\001\002\000" +
    "\004\044\144\001\002\000\012\004\uffdc\005\uffdc\015\uffdc" +
    "\047\uffdc\001\002\000\012\004\147\005\154\015\150\047" +
    "\007\001\002\000\004\047\007\001\002\000\004\047\uffe0" +
    "\001\002\000\010\004\147\005\154\047\007\001\002\000" +
    "\004\015\150\001\002\000\024\004\uffdb\005\uffdb\007\uffdb" +
    "\011\uffdb\012\uffdb\015\uffdb\026\uffdb\044\uffdb\047\uffdb\001" +
    "\002\000\004\047\uffdf\001\002\000\006\040\157\047\uffe1" +
    "\001\002\000\004\045\156\001\002\000\004\013\ufffb\001" +
    "\002\000\004\041\160\001\002\000\004\047\uffde\001\002" +
    "\000\004\045\ufff9\001\002\000\004\047\007\001\002\000" +
    "\006\042\165\044\uffd9\001\002\000\004\044\175\001\002" +
    "\000\010\004\147\005\154\047\007\001\002\000\004\043" +
    "\174\001\002\000\004\047\007\001\002\000\004\037\171" +
    "\001\002\000\010\004\147\005\154\047\007\001\002\000" +
    "\004\043\uffd7\001\002\000\004\037\uffda\001\002\000\004" +
    "\044\uffd8\001\002\000\022\004\uffdc\005\uffdc\007\uffdc\011" +
    "\uffdc\012\uffdc\026\uffdc\044\uffdc\047\uffdc\001\002\000\022" +
    "\004\147\005\154\007\031\011\027\012\ufffe\026\030\044" +
    "\025\047\007\001\002\000\004\012\201\001\002\000\010" +
    "\034\033\040\034\047\uffdf\001\002\000\022\021\036\022" +
    "\040\023\041\025\035\035\043\042\044\047\042\050\045" +
    "\001\002\000\020\027\052\030\053\031\054\032\051\033" +
    "\047\036\055\046\203\001\002\000\004\045\204\001\002" +
    "\000\004\015\ufff8\001\002\000\004\046\206\001\002\000" +
    "\024\004\uffdd\005\uffdd\007\uffdd\011\uffdd\012\uffdd\015\uffdd" +
    "\026\uffdd\044\uffdd\047\uffdd\001\002\000\012\004\147\005" +
    "\154\015\150\047\007\001\002\000\004\045\211\001\002" +
    "\000\004\013\ufffc\001\002\000\004\002\ufffa\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\006\010\004\011\003\001\001\000\002\001" +
    "\001\000\006\007\135\017\134\001\001\000\004\012\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\025\012\031\001\001\000" +
    "\010\005\130\012\031\015\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\106\001\001\000\004\004\036" +
    "\001\001\000\004\012\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\072\001\001\000\004\004\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\071" +
    "\001\001\000\002\001\001\000\004\004\070\001\001\000" +
    "\004\004\067\001\001\000\004\004\066\001\001\000\004" +
    "\004\065\001\001\000\004\012\055\001\001\000\004\024" +
    "\056\001\001\000\002\001\001\000\006\004\061\025\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\061\025\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\111\001\001\000\002\001\001\000" +
    "\006\005\113\012\031\001\001\000\002\001\001\000\006" +
    "\005\115\012\031\001\001\000\002\001\001\000\004\004" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\123\001\001\000\002\001\001\000" +
    "\006\005\125\012\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\130\012\031\015" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\135\017\211\001" +
    "\001\000\004\012\137\001\001\000\002\001\001\000\004" +
    "\013\206\001\001\000\004\012\142\001\001\000\002\001" +
    "\001\000\004\013\144\001\001\000\014\002\145\003\151" +
    "\006\150\012\152\016\154\001\001\000\004\012\204\001" +
    "\001\000\002\001\001\000\006\002\161\012\152\001\001" +
    "\000\006\006\150\016\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\162\001\001\000\004\023\163\001\001" +
    "\000\002\001\001\000\012\002\166\012\152\021\167\022" +
    "\165\001\001\000\002\001\001\000\004\012\172\001\001" +
    "\000\002\001\001\000\012\002\166\012\152\021\167\022" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\175\001\001\000\014\002\145\003" +
    "\151\005\130\012\177\015\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\145\003\151\006\150\012" +
    "\152\016\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpressionList ::= Expression COMMA ExpressionList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; RESULT.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodInvocationParameterList ::= LPAREN ExpressionList RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodInvocationParameterList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormalParameterList ::= FormalParameter COMMA FormalParameterList 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; l.addElement(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormalParameterListAndParens ::= LPAREN FormalParameterList RPAREN 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = params; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterListAndParens",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormalParameterListAndParens ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterListAndParens",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormalParameter ::= Type Identifier 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formal(t, i, tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDeclarationList ::= VarDeclarationList VarDeclaration 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dec e = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; l.addElement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclarationList ::= 
            {
              Object RESULT =null;
		 RESULT = new VarDeclList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclaration ::= Type Identifier SEMICOLON 
            {
              Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(t, i, tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= INTEGER_TYPE LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new IntArrayType(ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= Identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierType(i.s, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= BOOLEAN_TYPE 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanType(bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= INTEGER_TYPE 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerType(ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(i.intValue(), ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= Expression DOT Identifier MethodInvocationParameterList 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Call(e, id, l, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= NEW INTEGER_TYPE LBRACKET Expression RBRACKET 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(e, nleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= NEW Identifier LPAREN RPAREN 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewObject(i, nleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expression ::= THIS 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new This(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new False(fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new True(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= NOT Expression 
            {
              Exp RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(expr, notleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= LPAREN Expression RPAREN 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= Expression AND Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(arg1, arg2, arg1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Expression LT Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThan(arg1, arg2, arg1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression TIMES Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Times(arg1, arg2, arg1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= Expression MINUS Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Minus(arg1, arg2, arg1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression PLUS Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Plus(arg1, arg2, arg1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expression ::= IDENTIFIER 
            {
              Exp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExp(name, nameleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(id, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= LBRACE StatementList RBRACE 
            {
              Stm RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Block(s, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              Stm RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm s = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(cond, s, wleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON 
            {
              Stm RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAssign(id, e, v, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= SYSTEM_OUT_PRINTLN LPAREN Expression RPAREN SEMICOLON 
            {
              Stm RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(e, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              Stm RESULT =null;
		int ifKeywordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int ifKeywordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object ifKeyword = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stm thenStmt = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm elseStmt = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(expr, thenStmt, elseStmt, ifKeywordleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= Identifier BECOMES Expression SEMICOLON 
            {
              Stm RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assign(id, expr, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDecl ::= PUBLIC Type Identifier FormalParameterListAndParens LBRACE VarDeclarationList StatementList RETURN Expression SEMICOLON RBRACE 
            {
              Method RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object stmts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp rv = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new MethodDecl(t, i, params, vars, stmts, rv, pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MethodDeclList ::= MethodDecl MethodDeclList 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; l.addElement(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDeclList ::= ClassDecl ClassDeclList 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Class c = (Class)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; l.addElement(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclarationList MethodDeclList RBRACE 
            {
              Class RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object parent = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDeclExtends(i, parent, v, m, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDecl ::= CLASS Identifier LBRACE VarDeclarationList MethodDeclList RBRACE 
            {
              Class RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDeclSimple(i, v, m, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stm stmt = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new MainClass(id, args, stmt, cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainClass",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // StatementList ::= 
            {
              Object RESULT =null;
		 RESULT = new StatementList(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StatementList ::= Statement StatementList 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm s = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; l.addElement(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MainClass ClassDeclList 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(m, c, mleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


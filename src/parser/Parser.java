
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 08 22:52:53 CST 2017
//----------------------------------------------------

package parser;

import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 08 22:52:53 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\023\000\002\004\004\000\002\004\003" +
    "\000\002\005\012\000\002\005\010\000\002\006\004\000" +
    "\002\006\006\000\002\006\004\000\002\006\004\000\002" +
    "\007\005\000\002\007\002\000\002\010\016\000\002\011" +
    "\004\000\002\011\002\000\002\012\003\000\002\013\005" +
    "\000\002\013\003\000\002\013\002\000\002\015\004\000" +
    "\002\015\002\000\002\014\005\000\002\014\011\000\002" +
    "\014\007\000\002\014\007\000\002\014\006\000\002\014" +
    "\011\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\006\000" +
    "\002\016\005\000\002\016\010\000\002\016\007\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\007\000\002\016\006\000\002\016\004" +
    "\000\002\016\005\000\002\017\005\000\002\017\003\000" +
    "\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\005\006\001\002\000\004\002\216\001" +
    "\002\000\006\002\uffff\005\143\001\002\000\004\045\007" +
    "\001\002\000\004\036\010\001\002\000\004\006\011\001" +
    "\002\000\004\007\012\001\002\000\004\010\013\001\002" +
    "\000\004\011\014\001\002\000\004\034\015\001\002\000" +
    "\004\013\016\001\002\000\004\040\017\001\002\000\004" +
    "\041\020\001\002\000\004\045\021\001\002\000\004\035" +
    "\022\001\002\000\004\036\023\001\002\000\014\016\031" +
    "\020\027\021\030\036\024\045\026\001\002\000\016\016" +
    "\031\020\027\021\030\036\024\037\uffeb\045\026\001\002" +
    "\000\004\037\134\001\002\000\006\033\123\040\124\001" +
    "\002\000\004\034\117\001\002\000\004\034\113\001\002" +
    "\000\004\034\032\001\002\000\020\023\040\024\033\032" +
    "\034\034\042\045\041\046\036\047\035\001\002\000\006" +
    "\014\105\045\104\001\002\000\020\023\040\024\033\032" +
    "\034\034\042\045\041\046\036\047\035\001\002\000\032" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\035\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\001\002" +
    "\000\032\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\035" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\001\002\000\024\025\047\026\044\027\045\030\054\031" +
    "\046\035\077\040\053\044\050\045\052\001\002\000\032" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\035\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\001\002" +
    "\000\032\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\035" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\001\002\000\020\023\040\024\033\032\034\034\042\045" +
    "\041\046\036\047\035\001\002\000\024\025\047\026\044" +
    "\027\045\030\054\031\046\035\051\040\053\044\050\045" +
    "\052\001\002\000\020\023\040\024\033\032\034\034\042" +
    "\045\041\046\036\047\035\001\002\000\020\023\040\024" +
    "\033\032\034\034\042\045\041\046\036\047\035\001\002" +
    "\000\020\023\040\024\033\032\034\034\042\045\041\046" +
    "\036\047\035\001\002\000\020\023\040\024\033\032\034" +
    "\034\042\045\041\046\036\047\035\001\002\000\006\022" +
    "\066\045\067\001\002\000\032\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\035\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\001\002\000\004\034\060\001\002" +
    "\000\020\023\040\024\033\032\034\034\042\045\041\046" +
    "\036\047\035\001\002\000\020\023\040\024\033\032\034" +
    "\034\042\045\041\046\036\047\035\001\002\000\032\025" +
    "\047\026\044\027\045\030\uffe3\031\uffe3\035\uffe3\040\053" +
    "\041\uffe3\042\uffe3\043\uffe3\044\050\045\uffe3\001\002\000" +
    "\024\025\047\026\044\027\045\030\054\031\046\040\053" +
    "\041\057\044\050\045\052\001\002\000\032\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\035\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\001\002\000\024\023" +
    "\040\024\033\032\034\034\042\035\uffd1\043\uffd1\045\041" +
    "\046\036\047\035\001\002\000\026\025\047\026\044\027" +
    "\045\030\054\031\046\035\uffd2\040\053\043\uffd2\044\050" +
    "\045\052\001\002\000\006\035\064\043\063\001\002\000" +
    "\020\023\040\024\033\032\034\034\042\045\041\046\036" +
    "\047\035\001\002\000\032\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\001\002\000\026\025\047\026\044\027" +
    "\045\030\054\031\046\035\uffd3\040\053\043\uffd3\044\050" +
    "\045\052\001\002\000\032\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\035\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\001\002\000\004\034\070\001\002\000" +
    "\024\023\040\024\033\032\034\034\042\035\uffd1\043\uffd1" +
    "\045\041\046\036\047\035\001\002\000\006\035\072\043" +
    "\063\001\002\000\032\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\035\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\001\002\000\032\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\035\uffe2\040\053\041\uffe2\042\uffe2\043" +
    "\uffe2\044\050\045\uffe2\001\002\000\032\025\047\026\044" +
    "\027\045\030\054\031\uffe4\035\uffe4\040\053\041\uffe4\042" +
    "\uffe4\043\uffe4\044\050\045\uffe4\001\002\000\032\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\035\uffe0\040\053\041" +
    "\uffe0\042\uffe0\043\uffe0\044\050\045\uffe0\001\002\000\032" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\035\uffe1\040" +
    "\053\041\uffe1\042\uffe1\043\uffe1\044\050\045\uffe1\001\002" +
    "\000\014\016\031\020\027\021\030\036\024\045\026\001" +
    "\002\000\004\017\101\001\002\000\014\016\031\020\027" +
    "\021\030\036\024\045\026\001\002\000\022\004\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\036\uffe9\037\uffe9\045\uffe9" +
    "\001\002\000\032\025\047\026\044\027\045\030\uffd5\031" +
    "\uffd5\035\uffd5\040\053\041\uffd5\042\uffd5\043\uffd5\044\050" +
    "\045\uffd5\001\002\000\004\034\111\001\002\000\004\040" +
    "\106\001\002\000\020\023\040\024\033\032\034\034\042" +
    "\045\041\046\036\047\035\001\002\000\024\025\047\026" +
    "\044\027\045\030\054\031\046\040\053\041\110\044\050" +
    "\045\052\001\002\000\032\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\035\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\001\002\000\004\035\112\001\002\000" +
    "\032\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\035\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\001" +
    "\002\000\020\023\040\024\033\032\034\034\042\045\041" +
    "\046\036\047\035\001\002\000\024\025\047\026\044\027" +
    "\045\030\054\031\046\035\115\040\053\044\050\045\052" +
    "\001\002\000\004\042\116\001\002\000\022\004\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\036\uffe7\037\uffe7\045\uffe7" +
    "\001\002\000\020\023\040\024\033\032\034\034\042\045" +
    "\041\046\036\047\035\001\002\000\024\025\047\026\044" +
    "\027\045\030\054\031\046\035\121\040\053\044\050\045" +
    "\052\001\002\000\014\016\031\020\027\021\030\036\024" +
    "\045\026\001\002\000\022\004\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\036\uffe8\037\uffe8\045\uffe8\001\002\000\020" +
    "\023\040\024\033\032\034\034\042\045\041\046\036\047" +
    "\035\001\002\000\020\023\040\024\033\032\034\034\042" +
    "\045\041\046\036\047\035\001\002\000\024\025\047\026" +
    "\044\027\045\030\054\031\046\040\053\041\126\044\050" +
    "\045\052\001\002\000\004\033\127\001\002\000\020\023" +
    "\040\024\033\032\034\034\042\045\041\046\036\047\035" +
    "\001\002\000\024\025\047\026\044\027\045\030\054\031" +
    "\046\040\053\042\131\044\050\045\052\001\002\000\022" +
    "\004\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\036\uffe5\037" +
    "\uffe5\045\uffe5\001\002\000\024\025\047\026\044\027\045" +
    "\030\054\031\046\040\053\042\133\044\050\045\052\001" +
    "\002\000\022\004\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\036\uffe6\037\uffe6\045\uffe6\001\002\000\004\037\135\001" +
    "\002\000\006\002\ufffe\005\ufffe\001\002\000\020\004\uffeb" +
    "\016\031\020\027\021\030\036\024\037\uffeb\045\026\001" +
    "\002\000\004\037\140\001\002\000\022\004\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\036\uffea\037\uffea\045\uffea\001" +
    "\002\000\006\004\uffec\037\uffec\001\002\000\006\002\ufffc" +
    "\005\ufffc\001\002\000\004\045\146\001\002\000\006\002" +
    "\001\005\143\001\002\000\006\002\ufffd\005\ufffd\001\002" +
    "\000\006\012\150\036\147\001\002\000\014\006\ufff4\014" +
    "\ufff4\015\ufff4\037\ufff4\045\ufff4\001\002\000\004\045\151" +
    "\001\002\000\004\036\152\001\002\000\014\006\ufff4\014" +
    "\ufff4\015\ufff4\037\ufff4\045\ufff4\001\002\000\014\006\ufff1" +
    "\014\160\015\156\037\ufff1\045\155\001\002\000\006\006" +
    "\171\037\170\001\002\000\004\045\167\001\002\000\004" +
    "\045\166\001\002\000\004\042\165\001\002\000\006\040" +
    "\162\045\161\001\002\000\012\034\ufff9\035\ufff9\042\ufff9" +
    "\043\ufff9\001\002\000\004\041\163\001\002\000\004\045" +
    "\164\001\002\000\012\034\ufff8\035\ufff8\042\ufff8\043\ufff8" +
    "\001\002\000\026\004\ufff5\006\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\020\ufff5\021\ufff5\036\ufff5\037\ufff5\045\ufff5\001\002" +
    "\000\012\034\ufff7\035\ufff7\042\ufff7\043\ufff7\001\002\000" +
    "\012\034\ufff6\035\ufff6\042\ufff6\043\ufff6\001\002\000\006" +
    "\002\ufffb\005\ufffb\001\002\000\010\014\160\015\156\045" +
    "\155\001\002\000\006\006\ufff2\037\ufff2\001\002\000\004" +
    "\034\174\001\002\000\014\014\160\015\156\035\uffed\043" +
    "\uffed\045\155\001\002\000\006\035\201\043\200\001\002" +
    "\000\006\035\uffee\043\uffee\001\002\000\006\035\ufff0\043" +
    "\ufff0\001\002\000\010\014\160\015\156\045\155\001\002" +
    "\000\004\036\202\001\002\000\022\004\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\020\ufff4\021\ufff4\036\ufff4\045\ufff4\001\002" +
    "\000\022\004\uffeb\014\160\015\156\016\031\020\027\021" +
    "\030\036\024\045\205\001\002\000\004\004\206\001\002" +
    "\000\010\033\123\040\124\045\167\001\002\000\020\023" +
    "\040\024\033\032\034\034\042\045\041\046\036\047\035" +
    "\001\002\000\024\025\047\026\044\027\045\030\054\031" +
    "\046\040\053\042\210\044\050\045\052\001\002\000\004" +
    "\037\211\001\002\000\006\006\ufff3\037\ufff3\001\002\000" +
    "\006\035\uffef\043\uffef\001\002\000\014\006\ufff1\014\160" +
    "\015\156\037\ufff1\045\155\001\002\000\006\006\171\037" +
    "\215\001\002\000\006\002\ufffa\005\ufffa\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\143\005\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\024" +
    "\001\001\000\006\014\135\015\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\036\001\001\000\002\001" +
    "\001\000\004\016\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\042\001\001\000\002\001\001\000\004" +
    "\016\075\001\001\000\004\016\074\001\001\000\004\016" +
    "\073\001\001\000\004\016\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\055\001" +
    "\001\000\004\016\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\060\017\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\060\017\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\077\001\001\000\002\001\001\000\004\014\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\117\001\001\000\002" +
    "\001\001\000\004\014\121\001\001\000\002\001\001\000" +
    "\004\016\131\001\001\000\004\016\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\135\015\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\152\001\001\000\006\006\156\011\153" +
    "\001\001\000\004\010\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\176\012\175\013\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\176\012\211\001\001\000\002\001\001" +
    "\000\004\007\202\001\001\000\010\006\156\014\135\015" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\156\011\213" +
    "\001\001\000\004\010\171\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpList ::= 
            {
              ExpList RESULT =null;
		
                ExpList el = new ExpList(0);
                RESULT = el;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpList ::= Exp 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ExpList el = new ExpList(eleft);
                el.addElement(e);
                RESULT = el;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpList ::= ExpList COMMA Exp 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                el.addElement(e);
                RESULT = el;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp ::= LPAREN Exp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT =  e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= NOT Exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT =  new Not(e, eleft);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= NEW IDENTIFIER LPAREN RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                Identifier i = new Identifier(id, idleft);
                RESULT =  new NewObject(i, idleft);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= NEW INT LBRACK Exp RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT =  new NewArray(e, eleft);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= THIS 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT =  new This(tleft);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= IDENTIFIER 
            {
              Exp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT =  new IdentifierExp(name, nameleft);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= BOOLEAN_LITERAL 
            {
              Exp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(bool == true)
                    RESULT = new True(boolleft);
                else
                    RESULT = new False(boolleft);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT =  new IntegerLiteral(i, ileft);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp IDENTIFIER LPAREN ExpList RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Identifier id1 = new Identifier(id, idleft);
                RESULT =  new Call(e, id1, el, eleft);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Exp DOT IDENTIFIER LPAREN ExpList RPAREN 
            {
              Exp RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp obj = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int methleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int methright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String meth = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList args = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                Identifier id = new Identifier(meth, methleft);
                RESULT = new Call(obj, id, args, methleft);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp DOT LENGTH 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT =  new ArrayLength(arg1, arg1left);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= Exp LBRACK Exp RBRACK 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT =  new ArrayLookup(arg1, arg2, arg1left);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= Exp MULT Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT =  new Times(arg1, arg2, arg1left);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= Exp MINUS Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT =  new Minus(arg1, arg2, arg1left);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= Exp PLUS Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT =  new Plus(arg1, arg2, arg1left);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= Exp LT Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT =  new LessThan(arg1, arg2, arg1left);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= Exp AND_AND Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT =  new And(arg1, arg2, arg1left);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= IDENTIFIER LBRACK Exp RBRACK EQ Exp SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp ea = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp eb = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Identifier id = new Identifier(i, ileft);
                RESULT = new ArrayAssign(id, ea, eb, ileft);
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= IDENTIFIER EQ Exp SEMICOLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                Identifier id = new Identifier(i, ileft);
                RESULT = new Assign(id, e, ileft);
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= SYSTEM_OUT_PRINTLN LPAREN Exp RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new Print(e, eleft);
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= WHILE LPAREN Exp RPAREN Statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new While(e, s, eleft);
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= IF LPAREN Exp RPAREN Statement ELSE Statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement sa = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement sb = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new If(e, sa, sb, eleft);
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= LBRACE StatementList RBRACE 
            {
              Statement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new Block(sl, slleft);
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StatementList ::= 
            {
              StatementList RESULT =null;
		
               StatementList sl = new StatementList(0);
               RESULT = sl;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= Statement StatementList 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                sl.addElement(s);
                RESULT = sl;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FormalList ::= 
            {
              FormalList RESULT =null;
		
                FormalList fl = new FormalList(0); 
                RESULT = fl;  
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FormalList ::= Formal 
            {
              FormalList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                FormalList fl = new FormalList(fleft); 
                fl.addElement(f);
                RESULT = fl; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FormalList ::= FormalList COMMA Formal 
            {
              FormalList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                fl.addElement(f); 
                RESULT = fl; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Formal ::= Var 
            {
              Formal RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Formal(v.t, v.i, vleft);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodList ::= 
            {
              MethodDeclList RESULT =null;
		
            MethodDeclList ml = new MethodDeclList(0);
            RESULT = ml;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MethodList ::= MethodList Method 
            {
              MethodDeclList RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList ml = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ml.addElement(m);
            RESULT = ml;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Method ::= PUBLIC Var LPAREN FormalList RPAREN LBRACE VarList StatementList RETURN Exp SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		VarDeclList vl = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            Type ti = v.t;
            Identifier id = v.i;
            RESULT = new MethodDecl(ti, id, fl, vl, sl, e, vleft); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarList ::= 
            {
              VarDeclList RESULT =null;
		
            VarDeclList vl = new VarDeclList(0);
            RESULT = vl;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarList ::= VarList Var SEMICOLON 
            {
              VarDeclList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vl = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            vl.addElement(v);
            RESULT = vl;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Var ::= IDENTIFIER IDENTIFIER 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            IdentifierType type = new IdentifierType(t, idleft);
            Identifier i = new Identifier(id, idleft);
            RESULT = new VarDecl(type, i, idleft);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Var ::= BOOLEAN IDENTIFIER 
            {
              VarDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            BooleanType boole = new BooleanType(idleft);
            Identifier i = new Identifier(id, idleft);
            RESULT = new VarDecl(boole, i, idleft);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Var ::= INT LBRACK RBRACK IDENTIFIER 
            {
              VarDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            IntArrayType array = new IntArrayType(idleft);
            Identifier i = new Identifier(id, idleft);
            RESULT = new VarDecl(array, i, idleft); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Var ::= INT IDENTIFIER 
            {
              VarDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            IntegerType integer = new IntegerType(idleft);
            Identifier i = new Identifier(id, idleft);
            RESULT = new VarDecl(integer, i, idleft);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Class ::= CLASS IDENTIFIER LBRACE VarList MethodList RBRACE 
            {
              ClassDecl RESULT =null;
		int cnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vl = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList ml = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Identifier id = new Identifier(cname, cnameleft);
        RESULT = new ClassDeclSimple(id, vl, ml, cnameleft);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Class",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Class ::= CLASS IDENTIFIER EXTENDS IDENTIFIER LBRACE VarList MethodList RBRACE 
            {
              ClassDecl RESULT =null;
		int cnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String cname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int enameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int enameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ename = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vl = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList ml = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Identifier idc = new Identifier(cname, cnameleft);
        Identifier ide = new Identifier(ename, enameleft);
        RESULT = new ClassDeclExtends(idc, ide, vl, ml, cnameleft);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Class",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassList ::= Class 
            {
              ClassDeclList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDecl c = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ClassDeclList cl = new ClassDeclList(cleft);
        cl.addElement(c);
        RESULT = cl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassList ::= ClassList Class 
            {
              ClassDeclList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDeclList cl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDecl c = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        cl.addElement(c);
        RESULT = cl; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MainClass ::= CLASS IDENTIFIER LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK IDENTIFIER RPAREN LBRACE Statement RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int cnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int cnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String cname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Identifier idc = new Identifier(cname, cnameleft);
        Identifier idp = new Identifier(pname, pnameleft);
        RESULT = new MainClass(idc, idp, s, cnameleft);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainClass",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Goal ::= MainClass 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Program(m, null, mleft);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Goal ::= MainClass ClassList 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDeclList cl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(m, cl, mleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


/* The following code was generated by JFlex 1.4.1 on 6/8/17 10:43 PM */

/*
 * JFlex specification for MiniJava.
 */



package lexer;

import java_cup.runtime.*;
import parser.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/8/17 10:43 PM from the specification file
 * <tt>Lexer.flex</tt>
 */
public final class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  8,  0,  7,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 40,  0,  0,  0,  0, 41,  0, 29, 30,  2, 42, 36, 43, 37,  1, 
     5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0, 35, 39, 38,  0,  0, 
     0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  3,  3, 44,  3,  3,  3,  3,  3,  3,  3, 33,  0, 34,  0,  4, 
     0, 14, 10, 16, 20, 13, 23, 45, 28, 22,  3,  3, 12, 46, 15, 11, 
    24,  3, 26, 17, 19, 25, 27, 21, 18, 47,  3, 31,  0, 32,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\0\15\2\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\0\1\21\1\22\2\2\1\4"+
    "\1\0\13\2\1\23\4\2\1\24\3\2\2\4\4\0"+
    "\4\2\1\25\5\2\1\26\7\2\1\4\2\0\1\4"+
    "\2\2\1\27\3\2\1\30\1\31\3\2\1\32\2\2"+
    "\1\33\1\4\1\0\1\4\1\0\3\2\1\34\1\2"+
    "\1\35\4\2\1\4\1\0\1\2\1\36\1\2\1\37"+
    "\1\40\1\41\1\42\1\2\1\43\1\44\13\0\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\140\0\300\0\140\0\360"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\140\0\140\0\140"+
    "\0\140\0\140\0\140\0\140\0\140\0\140\0\140\0\140"+
    "\0\140\0\u0390\0\140\0\140\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\220\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\140\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\220\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\220\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\220\0\u0d20\0\u0d50\0\u0d80\0\220\0\220"+
    "\0\u0db0\0\u0de0\0\u0e10\0\220\0\u0e40\0\u0e70\0\220\0\u0ea0"+
    "\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\220\0\u0ff0"+
    "\0\220\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140"+
    "\0\220\0\u1170\0\220\0\220\0\220\0\220\0\u11a0\0\220"+
    "\0\220\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0"+
    "\0\u1320\0\u1350\0\u1380\0\u13b0\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\0\1\5\1\6\2\7"+
    "\1\10\1\11\1\4\1\12\1\13\1\4\1\14\1\15"+
    "\1\16\1\4\1\17\1\4\1\20\1\21\1\22\1\23"+
    "\1\4\1\24\1\25\1\4\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\4\1\46\1\4\1\0"+
    "\1\47\1\50\140\0\4\4\3\0\23\4\17\0\4\4"+
    "\5\0\2\6\61\0\1\7\52\0\4\4\3\0\1\4"+
    "\1\51\21\4\17\0\4\4\3\0\4\4\3\0\3\4"+
    "\1\52\17\4\17\0\4\4\3\0\4\4\3\0\2\4"+
    "\1\53\5\4\1\54\12\4\17\0\4\4\3\0\4\4"+
    "\3\0\3\4\1\55\17\4\17\0\4\4\3\0\4\4"+
    "\3\0\2\4\1\56\20\4\17\0\4\4\3\0\4\4"+
    "\3\0\11\4\1\57\11\4\17\0\4\4\3\0\4\4"+
    "\3\0\20\4\1\60\1\4\1\61\17\0\4\4\3\0"+
    "\4\4\3\0\22\4\1\62\17\0\4\4\3\0\4\4"+
    "\3\0\5\4\1\63\7\4\1\64\5\4\17\0\4\4"+
    "\3\0\4\4\3\0\4\4\1\65\16\4\17\0\4\4"+
    "\3\0\4\4\3\0\17\4\1\66\3\4\17\0\4\4"+
    "\3\0\4\4\3\0\3\4\1\67\17\4\17\0\4\4"+
    "\3\0\4\4\3\0\1\4\1\70\21\4\17\0\4\4"+
    "\51\0\1\71\11\0\4\4\3\0\11\4\1\72\11\4"+
    "\17\0\3\4\1\73\3\0\4\4\3\0\4\4\1\74"+
    "\16\4\17\0\4\4\1\47\1\75\6\47\1\76\1\77"+
    "\46\47\1\100\1\101\1\102\55\100\3\0\4\4\3\0"+
    "\1\4\1\103\21\4\17\0\4\4\3\0\4\4\3\0"+
    "\5\4\1\104\15\4\17\0\4\4\3\0\4\4\3\0"+
    "\7\4\1\105\13\4\17\0\4\4\3\0\4\4\3\0"+
    "\11\4\1\106\11\4\17\0\4\4\3\0\4\4\3\0"+
    "\13\4\1\107\7\4\17\0\4\4\3\0\4\4\3\0"+
    "\4\4\1\110\16\4\17\0\4\4\3\0\4\4\3\0"+
    "\4\4\1\111\16\4\17\0\4\4\3\0\4\4\3\0"+
    "\17\4\1\112\3\4\17\0\4\4\3\0\4\4\3\0"+
    "\14\4\1\113\6\4\17\0\4\4\3\0\4\4\3\0"+
    "\14\4\1\114\6\4\17\0\4\4\3\0\4\4\3\0"+
    "\11\4\1\115\11\4\17\0\4\4\3\0\4\4\3\0"+
    "\2\4\1\116\20\4\17\0\4\4\3\0\4\4\3\0"+
    "\1\117\22\4\17\0\4\4\3\0\4\4\3\0\11\4"+
    "\1\120\11\4\17\0\4\4\3\0\4\4\3\0\14\4"+
    "\1\121\6\4\17\0\4\4\3\0\4\4\3\0\20\4"+
    "\1\122\2\4\17\0\4\4\3\0\4\4\3\0\7\4"+
    "\1\123\13\4\17\0\4\4\3\0\4\4\3\0\14\4"+
    "\1\124\6\4\17\0\4\4\1\47\1\75\1\125\5\47"+
    "\1\76\1\77\46\47\1\0\1\2\66\0\1\76\47\0"+
    "\2\100\1\126\57\100\1\127\56\100\1\130\1\102\55\100"+
    "\3\0\4\4\3\0\2\4\1\131\20\4\17\0\4\4"+
    "\3\0\4\4\3\0\23\4\17\0\1\4\1\132\2\4"+
    "\3\0\4\4\3\0\3\4\1\133\17\4\17\0\4\4"+
    "\3\0\4\4\3\0\3\4\1\134\17\4\17\0\4\4"+
    "\3\0\4\4\3\0\7\4\1\135\13\4\17\0\4\4"+
    "\3\0\4\4\3\0\11\4\1\136\11\4\17\0\4\4"+
    "\3\0\4\4\3\0\3\4\1\137\17\4\17\0\4\4"+
    "\3\0\4\4\3\0\7\4\1\140\13\4\17\0\4\4"+
    "\3\0\4\4\3\0\2\4\1\141\20\4\17\0\4\4"+
    "\3\0\4\4\3\0\7\4\1\112\13\4\17\0\4\4"+
    "\3\0\4\4\3\0\2\4\1\142\20\4\17\0\4\4"+
    "\3\0\4\4\3\0\17\4\1\143\3\4\17\0\4\4"+
    "\3\0\4\4\3\0\12\4\1\144\10\4\17\0\4\4"+
    "\3\0\4\4\3\0\14\4\1\145\6\4\17\0\4\4"+
    "\3\0\4\4\3\0\11\4\1\146\11\4\17\0\4\4"+
    "\3\0\4\4\3\0\5\4\1\147\15\4\17\0\4\4"+
    "\1\150\2\125\5\150\1\130\1\151\46\150\1\100\1\76"+
    "\1\126\56\100\1\152\1\126\56\100\1\153\1\126\55\100"+
    "\3\0\4\4\3\0\3\4\1\154\17\4\17\0\4\4"+
    "\3\0\4\4\3\0\11\4\1\155\11\4\17\0\4\4"+
    "\3\0\4\4\3\0\5\4\1\156\15\4\17\0\4\4"+
    "\3\0\4\4\3\0\7\4\1\157\13\4\17\0\4\4"+
    "\3\0\4\4\3\0\14\4\1\160\6\4\17\0\4\4"+
    "\3\0\4\4\3\0\3\4\1\161\17\4\17\0\4\4"+
    "\3\0\4\4\3\0\14\4\1\162\6\4\17\0\4\4"+
    "\3\0\4\4\3\0\20\4\1\163\2\4\17\0\4\4"+
    "\3\0\4\4\3\0\5\4\1\164\15\4\17\0\4\4"+
    "\3\0\4\4\3\0\3\4\1\165\17\4\17\0\4\4"+
    "\1\150\1\125\1\166\5\150\1\130\1\151\46\150\2\100"+
    "\1\126\5\100\1\130\50\100\1\153\1\127\56\100\1\150"+
    "\1\167\55\100\3\0\4\4\3\0\4\4\1\170\16\4"+
    "\17\0\4\4\3\0\4\4\3\0\22\4\1\171\17\0"+
    "\4\4\3\0\4\4\3\0\12\4\1\172\10\4\17\0"+
    "\4\4\3\0\4\4\3\0\6\4\1\173\14\4\17\0"+
    "\4\4\3\0\4\4\3\0\6\4\1\174\14\4\17\0"+
    "\4\4\3\0\4\4\3\0\5\4\1\175\15\4\17\0"+
    "\4\4\3\0\4\4\3\0\23\4\17\0\1\4\1\176"+
    "\2\4\3\0\4\4\3\0\23\4\17\0\2\4\1\177"+
    "\1\4\1\150\1\75\1\166\5\150\1\130\1\151\46\150"+
    "\1\100\1\152\1\102\55\100\3\0\4\4\3\0\5\4"+
    "\1\200\15\4\17\0\4\4\3\0\4\4\3\0\7\4"+
    "\1\201\13\4\17\0\4\4\3\0\4\4\3\0\23\4"+
    "\10\0\1\202\6\0\4\4\13\0\1\203\75\0\1\204"+
    "\51\0\1\205\101\0\1\206\42\0\1\207\61\0\1\210"+
    "\53\0\1\211\50\0\1\212\63\0\1\213\50\0\1\214"+
    "\62\0\1\215\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5088];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\1\0\15\1"+
    "\14\11\1\0\2\11\3\1\1\0\20\1\1\11\5\1"+
    "\4\0\23\1\2\0\21\1\1\0\1\1\1\0\13\1"+
    "\1\0\12\1\13\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // note that these Symbol constructors are abusing the Symbol
  // interface to use Symbol's left and right fields as line and column
  // fields instead
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }
/*
  // print out a symbol (aka token) nicely
  public String symbolToString(Symbol s) {
    switch (s.sym) {
        case sym.CLASS:                 return "CLASS";
        case sym.PUBLIC:                return "PUBLIC";
        case sym.STATIC:                return "STATIC";
        case sym.EXTENDS:               return "EXTENDS";
        case sym.MAIN:                  return "MAIN";  
        case sym.RETURN:                return "RETURN";
        case sym.STRING:                return "STRING";
        case sym.VOID:                  return "VOID";
        case sym.INT:                   return "INT";
        case sym.BOOLEAN:               return "BOOLEAN";
        case sym.IF:                    return "IF";
        case sym.ELSE:                  return "ELSE";
        case sym.WHILE:                 return "WHILE"; 
        case sym.SYSTEM_OUT_PRINTLN:    return "SYSTEM_OUT_PRINTLN";
        case sym.LENGTH:                return "LENGTH";
        case sym.THIS:                  return "THIS";
        case sym.NEW:                   return "NEW";
        case sym.LPAREN:                return "LPAREN";
        case sym.RPAREN:                return "RPAREN";
        case sym.LBRACE:                return "LBRACE";
        case sym.RBRACE:                return "RBRACE";
        case sym.LBRACK:                return "LBRACK";
        case sym.RBRACK:                return "RBRACK";        
        case sym.SEMICOLON:             return "SEMICOLON";
        case sym.COMMA:                 return "COMMA";
        case sym.DOT:                   return "DOT";
        case sym.EQ:                    return "EQ";
        case sym.LT:                    return "LT";
        case sym.NOT:                   return "NOT";
        case sym.AND_AND:               return "AND_AND";
        case sym.PLUS:                  return "PLUS";
        case sym.MINUS:                 return "MINUS";
        case sym.MULT:                  return "MULT";
        case sym.BOOLEAN_LITERAL:       return "BOOLEAN("+ s.value.toString() + ")";
        case sym.IDENTIFIER:            return "ID(" + (String)s.value + ")";
        case sym.INTEGER_LITERAL:       return "INTEGER(" + String.valueOf(s.value) +")";
        case sym.EOF:                   return "<EOF>";
        case sym.error:                 return "<ERROR>";
        default:                        return "<UNEXPECTED TOKEN " + s.toString() + ">";
    }
  }
  */


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { return symbol(sym.CLASS);
          }
        case 38: break;
        case 6: 
          { return symbol(sym.RPAREN);
          }
        case 39: break;
        case 30: 
          { return symbol(sym.LENGTH);
          }
        case 40: break;
        case 15: 
          { return symbol(sym.LT);
          }
        case 41: break;
        case 7: 
          { return symbol(sym.LBRACE);
          }
        case 42: break;
        case 22: 
          { return symbol(sym.INT);
          }
        case 43: break;
        case 16: 
          { return symbol(sym.NOT);
          }
        case 44: break;
        case 33: 
          { return symbol(sym.RETURN);
          }
        case 45: break;
        case 17: 
          { return symbol(sym.PLUS);
          }
        case 46: break;
        case 3: 
          { return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
          }
        case 47: break;
        case 36: 
          { return symbol(sym.EXTENDS);
          }
        case 48: break;
        case 4: 
          { /*ignore*/
          }
        case 49: break;
        case 26: 
          { return symbol(sym.VOID);
          }
        case 50: break;
        case 2: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 51: break;
        case 27: 
          { return symbol(sym.MAIN);
          }
        case 52: break;
        case 9: 
          { return symbol(sym.LBRACK);
          }
        case 53: break;
        case 23: 
          { return symbol(sym.ELSE);
          }
        case 54: break;
        case 31: 
          { return symbol(sym.STATIC);
          }
        case 55: break;
        case 1: 
          { return symbol(sym.MULT);
          }
        case 56: break;
        case 29: 
          { return symbol(sym.WHILE);
          }
        case 57: break;
        case 19: 
          { return symbol(sym.IF);
          }
        case 58: break;
        case 5: 
          { return symbol(sym.LPAREN);
          }
        case 59: break;
        case 25: 
          { return symbol(sym.THIS);
          }
        case 60: break;
        case 14: 
          { return symbol(sym.EQ);
          }
        case 61: break;
        case 8: 
          { return symbol(sym.RBRACE);
          }
        case 62: break;
        case 11: 
          { return symbol(sym.SEMICOLON);
          }
        case 63: break;
        case 20: 
          { return symbol(sym.AND_AND);
          }
        case 64: break;
        case 24: 
          { return symbol(sym.BOOLEAN_LITERAL, new Boolean(true));
          }
        case 65: break;
        case 18: 
          { return symbol(sym.MINUS);
          }
        case 66: break;
        case 37: 
          { return symbol(sym.SYSTEM_OUT_PRINTLN);
          }
        case 67: break;
        case 21: 
          { return symbol(sym.NEW);
          }
        case 68: break;
        case 35: 
          { return symbol(sym.BOOLEAN);
          }
        case 69: break;
        case 34: 
          { return symbol(sym.STRING);
          }
        case 70: break;
        case 12: 
          { return symbol(sym.COMMA);
          }
        case 71: break;
        case 10: 
          { return symbol(sym.RBRACK);
          }
        case 72: break;
        case 32: 
          { return symbol(sym.PUBLIC);
          }
        case 73: break;
        case 13: 
          { return symbol(sym.DOT);
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
